<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sayee.sxsy.modules.assessappraisal.dao.AssessAppraisalDao">

	<sql id="assessAppraisalColumns">
        if(a.assess_appraisal_id IS NULL,r.report_registration_id,a.assess_appraisal_id)AS "assessAppraisalId",
        if(a.complaint_main_id IS NULL ,r.complaint_main_id,a.complaint_main_id)AS "complaintMainId",
		a.apply_type AS "applyType",
		a.responsibility_ratio AS "responsibilityRatio",
		a.host AS "host",
		a.clerk AS "clerk",
		a.patient_name AS "patientName",
		a.patient_sex AS "patientSex",
		a.patient_age AS "patientAge",
		a.hospital_number AS "hospitalNumber",
		a.involve_hospital AS "involveHospital",
		a.diagnostic_analysis AS "diagnosticAnalysis",
		a.treatment_analysis AS "treatmentAnalysis",
		a.other_medical_analysis AS "otherMedicalAnalysis",
		a.eighteen_items AS "eighteenItems",
		a.medical_expert AS "medicalExpert",
		a.legal_expert AS "legalExpert",
		a.other AS "other",
		a.calculated_amount AS "calculatedAmount",
		a.handle_people AS "handlePeople",
		a.handle_time AS "handleTime",
		a.doctor_clear AS "doctorClear",
		a.patient_clear AS "patientClear",
		a.patient_avoid AS "patientAvoid",
		a.doctor_avoid AS "doctorAvoid",
		a.next_link AS "nextLink",
		a.next_link_man AS "nextLinkMan",
		a.create_by  AS "createBy.id",
		if(a.create_by IS NULL,au.create_by,a.create_by) AS "createUser",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.medical_expert_name AS "medicalExpertName",
		a.legal_expert_name AS"legalExpertName",
		a.del_flag AS "delFlag",
		a.scale AS "scale",
		b.case_number AS "complaintMain.caseNumber",
		b.patient_name AS "complaintMain.patientName",
		b.patient_sex AS "complaintMain.patientSex",
		b.patient_age AS "complaintMain.patientAge",
		b.patient_card AS "complaintMain.patientCard",
		b.involve_hospital AS "complaintMain.involveHospital",
		b.hospital_level AS "complaintMain.hospitalLevel",
		b.hospital_grade AS "complaintMain.hospitalGrade",
		b.involve_department AS "complaintMain.involveDepartment",
		b.involve_employee AS "complaintMain.involveEmployee",
		b.proc_ins_id AS "complaintMain.procInsId",
		b.is_major AS "complaintMain.isMajor",
		sa.name AS "area.name",
		o.name AS "complaintMain.hospital.name",
		o.is_insured AS "complaintMain.hospital.isInsured",
		o1.name AS "complaintMain.department.name",
		u1.name AS "complaintMain.employee.name",
		u2.name AS "linkEmployee.name",
		au.policy_number AS "auditAcceptance.policyNumber",
		au.create_date AS "auditAcceptance.createDate",
        au.treatment_outcome AS "auditAcceptance.treatmentOutcome",
        au.insurance_company AS "auditAcceptance.insuranceCompany",
        ma.agent AS "auditAcceptance.mediateApplyInfo.agent",
        ma.hospital_mobile AS "auditAcceptance.mediateApplyInfo.hospitalMobile",
		r.report_emp AS "reportRegistration.reportEmp",
		r.dispute_time AS "reportRegistration.disputeTime",
		r.patient_mobile AS "reportRegistration.patientMobile",
		t.ID_ AS "complaintMain.act.taskId",
		t.ASSIGNEE_ AS "complaintMain.act.assigneeName",
		hr.record_id AS "recordInfo1.recordId",
        hr.start_time AS "recordInfo1.startTime",
        hr.end_time AS "recordInfo1.endTime",
        hr.address AS "recordInfo1.recordAddress",
        hr.cause AS "recordInfo1.cause",
        hr.host AS "recordInfo1.host",
        hr.note_taker AS "recordInfo1.noteTaker",
        hr.patient AS "recordInfo1.patient",
        hr.doctor AS "recordInfo1.doctor",
        hr.other_participants AS "recordInfo1.otherParticipants",
        hr.record_content AS "recordInfo1.recordContent",
		yr.record_id AS "recordInfo1.yrecordInfo.recordId",
        yr.start_time AS "recordInfo1.yrecordInfo.startTime",
        yr.end_time AS "recordInfo1.yrecordInfo.endTime",
        yr.address AS "recordInfo1.yrecordInfo.recordAddress",
        yr.cause AS "recordInfo1.yrecordInfo.cause",
        yr.host AS "recordInfo1.yrecordInfo.host",
        yr.note_taker AS "recordInfo1.yrecordInfo.noteTaker",
        yr.patient AS "recordInfo1.yrecordInfo.patient",
        yr.doctor AS "recordInfo1.yrecordInfo.doctor",
        yr.other_participants AS "recordInfo1.yrecordInfo.otherParticipants",
        yr.record_content AS "recordInfo1.yrecordInfo.recordContent",
        p.proposal_id AS "proposal.proposalId",
        p.assess_appraisal_id AS "proposal.assessAppraisalId",
        if(p.treatment_summary IS NULL ,au.summary_of_disputes,p.treatment_summary) AS "proposal.treatmentSummary",
        p.patient_think AS "proposal.patientThink",
        p.doctor_think AS "proposal.doctorThink",
        p.analysis_opinion AS "proposal.analysisOpinion",
		p.diagnosis AS "proposal.diagnosis",
		p.treatment AS "proposal.treatment",
		p.other AS "proposal.other",
		p.conclusion AS "proposal.conclusion",
		p.proposal_code AS "proposal.proposalCode",
		u3.name AS "hosts.name",
		u4.name AS "clerks.name"

	</sql>

	<sql id="assessAppraisalJoins">
		LEFT JOIN ASSESS_APPRAISAL a on a.complaint_main_id = b.complaint_main_id
		LEFT JOIN AUDIT_ACCEPTANCE au on b.complaint_main_id = au.complaint_main_id
		LEFT JOIN MEDIATE_APPLY_INFO ma on ma.audit_acceptance_id = au.audit_acceptance_id AND ma.apply_type='2'
		LEFT JOIN REPORT_REGISTRATION r ON b.complaint_main_id=r.complaint_main_id
		LEFT JOIN ACT_RU_TASK t on t.PROC_INST_ID_=b.PROC_INS_ID
		LEFT JOIN PROPOSAL p ON p.assess_appraisal_id=a.assess_appraisal_id
		LEFT JOIN RECORD_INFO hr ON hr.relation_id = a.assess_appraisal_id and hr.type='1'
		LEFT JOIN SYS_USER uz ON uz.id = hr.host
		LEFT JOIN SYS_USER uj ON uj.id=hr.note_taker
		LEFT JOIN SYS_USER uy ON uy.id=hr.doctor
		LEFT JOIN RECORD_INFO yr ON yr.relation_id = a.assess_appraisal_id and yr.type='2'
		LEFT JOIN SYS_USER uz1 ON uz1.id = yr.host
		LEFT JOIN SYS_USER uj1 ON uj1.id=yr.note_taker
		LEFT JOIN SYS_USER uy1 ON uy1.id=yr.doctor
		LEFT JOIN SYS_OFFICE o on o.id=b.involve_hospital
		LEFT JOIN SYS_AREA sa ON sa.id=o.area_id
		LEFT JOIN SYS_OFFICE o1 ON o1.id=b.involve_department
		LEFT JOIN SYS_USER u1 ON u1.id=b.involve_employee
		LEFT JOIN SYS_USER u2 ON u2.id=a.next_link_man
		LEFT Join SYS_USER u3 ON u3.id=a.host
		LEFT Join SYS_USER u4 ON u4.id=a.clerk
	</sql>

	<select id="get" resultType="AssessAppraisal">
		SELECT
		<include refid="assessAppraisalColumns"/>
		FROM COMPLAINT_MAIN b
		<include refid="assessAppraisalJoins"/>
		WHERE a.assess_appraisal_id = #{assessAppraisalId} OR r.report_registration_id = #{assessAppraisalId}
	</select>

	<select id="findList" resultType="AssessAppraisal">
		SELECT
		ci.COMPLAINT_ID as "complaintMain.complaintId",
		<include refid="assessAppraisalColumns"/>
		FROM COMPLAINT_MAIN b
		<include refid="assessAppraisalJoins"/>
		LEFT JOIN COMPLAINT_INFO ci ON b.COMPLAINT_MAIN_ID = ci.COMPLAINT_MAIN_ID
		<where>
			if(a.del_flag IS NOT NULL,a.del_flag = #{DEL_FLAG_NORMAL},r.del_flag = #{DEL_FLAG_NORMAL})AND b.PROC_INS_ID is NOT null	AND t.TASK_DEF_KEY_='evaluation'
			<if test="user != null and user.id != null and user.id != ''">
				AND t.ASSIGNEE_ LIKE CONCAT('%', #{user.loginName}, '%')
			</if>
			<if test="list != null and list != ''">
				AND t.ASSIGNEE_ in
				<foreach collection="list" item="id" index="index" open="(" close=")" separator=",">
					#{id}
				</foreach>
			</if>
			<if test="reportRegistration != null and reportRegistration.reportTime != null and reportRegistration.reportTime !=''">
				AND r.report_time LIKE CONCAT('%', #{reportRegistration.reportTime}, '%')
			</if>
			<if test="complaintMain !=null and complaintMain.patientName != null and complaintMain.patientName != ''">
				AND b.patient_name LIKE CONCAT('%', #{complaintMain.patientName}, '%')
			</if>
			<if test="complaintMain !=null and complaintMain.caseNumber != null and complaintMain.caseNumber != ''">
				AND b.case_number LIKE CONCAT('%', #{complaintMain.caseNumber}, '%')
			</if>
			<if test="complaintMain !=null and complaintMain.involveHospital != null and complaintMain.involveHospital != ''">
				AND b.involve_hospital LIKE CONCAT('%', #{complaintMain.involveHospital}, '%')
			</if>

		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<select id="findAllList" resultType="AssessAppraisal">
		SELECT
		<include refid="assessAppraisalColumns"/>
		FROM ASSESS_APPRAISAL a
		<include refid="assessAppraisalJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<insert id="insert">
		INSERT INTO ASSESS_APPRAISAL(
		assess_appraisal_id,
		complaint_main_id,
		apply_type,
		responsibility_ratio,
		host,
		clerk,
		patient_name,
		patient_sex,
		patient_age,
		hospital_number,
		involve_hospital,
		diagnostic_analysis,
		treatment_analysis,
		other_medical_analysis,
		eighteen_items,
		medical_expert,
		legal_expert,
		other,
		calculated_amount,
		handle_people,
		handle_time,
		doctor_clear ,
		patient_clear,
		patient_avoid,
		doctor_avoid,
		next_link,
		next_link_man,
		create_by,
		create_date,
		update_by,
		update_date,
		medical_expert_name,
		legal_expert_name,
		scale,
		del_flag
		) VALUES (
		#{assessAppraisalId},
		#{complaintMainId},
		#{applyType},
		#{responsibilityRatio},
		#{host},
		#{clerk},
		#{patientName},
		#{patientSex},
		#{patientAge},
		#{hospitalNumber},
		#{involveHospital},
		#{diagnosticAnalysis},
		#{treatmentAnalysis},
		#{otherMedicalAnalysis},
		#{eighteenItems},
		#{medicalExpert},
		#{legalExpert},
		#{other},
		#{calculatedAmount},
		#{handlePeople},
		#{handleTime},
		#{doctorClear} ,
		#{patientClear},
		#{patientAvoid},
		#{doctorAvoid},
		#{nextLink},
		#{nextLinkMan},
		#{createBy.id},
		#{createDate},
		#{updateBy.id},
		#{updateDate},
		#{medicalExpertName},
		#{legalExpertName},
		#{scale},
		#{delFlag}
		)
	</insert>

	<update id="update">
		UPDATE ASSESS_APPRAISAL SET
			assess_appraisal_id = #{assessAppraisalId},
			complaint_main_id = #{complaintMainId},
			apply_type = #{applyType},
			responsibility_ratio = #{responsibilityRatio},
			host = #{host},
			clerk = #{clerk},
			patient_name = #{patientName},
			patient_sex = #{patientSex},
			patient_age = #{patientAge},
			hospital_number = #{hospitalNumber},
			involve_hospital = #{involveHospital},
			diagnostic_analysis = #{diagnosticAnalysis},
			treatment_analysis = #{treatmentAnalysis},
			other_medical_analysis = #{otherMedicalAnalysis},
			eighteen_items = #{eighteenItems},
			medical_expert = #{medicalExpert},
			legal_expert = #{legalExpert},
			other = #{other},
			calculated_amount = #{calculatedAmount},
			handle_people = #{handlePeople},
			handle_time = #{handleTime},
			doctor_clear = #{doctorClear},
			patient_clear = #{patientClear},
			patient_avoid = #{patientAvoid},
			doctor_avoid = #{doctorAvoid},
			next_link = #{nextLink},
			next_link_man = #{nextLinkMan},
			update_by = #{updateBy.id},
			medical_expert_name = #{medicalExpertName},
			legal_expert_name = #{legalExpertName},
			update_date = #{updateDate},
			scale = #{scale}
		WHERE assess_appraisal_id = #{assessAppraisalId}
	</update>

	<update id="delete">
		UPDATE ASSESS_APPRAISAL SET
			del_flag = #{DEL_FLAG_DELETE}
		WHERE assess_appraisal_id = #{assessAppraisalId}
	</update>

</mapper>