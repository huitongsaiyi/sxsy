<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sayee.sxsy.modules.nestigateeividence.dao.InvestigateEvidenceDao">

	<sql id="investigateEvidenceColumns">
        if(a.investigate_evidence_id IS NULL,r.report_registration_id,a.investigate_evidence_id) AS "investigateEvidenceId",
        if(a.complaint_main_id IS NULL,r.complaint_main_id,a.complaint_main_id)AS "complaintMainId",
		a.start_time AS "startTime",
		a.end_time AS "endTime",
		a.address AS "address",
		a.cause AS "cause",
		a.investigator AS "investigator",
		a.note_taker AS "noteTaker",
		a.content AS "content",
		a.focus AS "focus",
		a.investigate_type AS "investigateType",
		a.handle_people AS "handlePeople",
		a.handle_time AS "handleTime",
		a.next_link AS "nextLink",
		a.next_link_man AS "nextLinkMan",
		a.create_by AS "createBy.id",
		if(a.create_by IS NULL,au.create_by,a.create_by) AS "createUser",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag",
		if(aa.investigate_evidence_id IS NULL,r.report_registration_id,aa.investigate_evidence_id) AS "investigateEvidence.investigateEvidenceId",
		if(aa.complaint_main_id IS NULL,r.complaint_main_id,aa.complaint_main_id)AS "investigateEvidence.complaintMainId",
		aa.start_time AS "investigateEvidence.startTime",
		aa.end_time AS "investigateEvidence.endTime",
		aa.address AS "investigateEvidence.address",
		aa.cause AS "investigateEvidence.cause",
		aa.investigator AS "investigateEvidence.investigator",
		aa.note_taker AS "investigateEvidence.noteTaker",
		aa.content AS "investigateEvidence.content",
		aa.focus AS "investigateEvidence.focus",
		aa.investigate_type AS "investigateEvidence.investigateType",
		aa.handle_people AS "investigateEvidence.handlePeople",
		aa.handle_time AS "investigateEvidence.handleTime",
		aa.next_link AS "investigateEvidence.nextLink",
		aa.next_link_man AS "investigateEvidence.nextLinkMan",
		aa.create_by AS "investigateEvidence.createBy.id",
		aa.create_date AS "investigateEvidence.createDate",
		aa.update_by AS "investigateEvidence.updateBy.id",
		aa.update_date AS "investigateEvidence.updateDate",
		aa.del_flag AS "investigateEvidence.delFlag",
		b.case_number AS "complaintMain.caseNumber",
		b.patient_name AS "complaintMain.patientName",
		b.patient_sex AS "complaintMain.patientSex",
		b.patient_age AS "complaintMain.patientAge",
		b.patient_card AS "complaintMain.patientCard",
		b.involve_hospital AS "complaintMain.involveHospital",
		b.hospital_level AS "complaintMain.hospitalLevel",
		b.hospital_grade AS "complaintMain.hospitalGrade",
		b.involve_department AS "complaintMain.involveDepartment",
		b.involve_employee AS "complaintMain.involveEmployee",
		b.proc_ins_id AS "complaintMain.procInsId",
		b.is_major AS "complaintMain.isMajor",
		sa.name AS "area.name",
		u.name AS "dcEmployee.name",
		o.name AS "complaintMain.hospital.name",
		o1.name AS "complaintMain.department.name",
		u1.name AS "complaintMain.employee.name",
		u2.name AS "linkEmployee.name",
		t.ID_ AS "complaintMain.act.taskId",
		t.ASSIGNEE_ AS "complaintMain.act.assigneeName",
		au.policy_number AS "auditAcceptance.policyNumber",
		au.create_date AS "auditAcceptance.createDate",
        au.treatment_outcome AS "auditAcceptance.treatmentOutcome",
        au.insurance_company AS "auditAcceptance.insuranceCompany",
        d.label AS "addressLabel",
        dd.label AS "investigateEvidence.addressLabel",
	    r.report_emp AS "reportRegistration.reportEmp",
		r.dispute_time AS "reportRegistration.disputeTime",
		r.patient_mobile AS "reportRegistration.patientMobile"
	</sql>

	<sql id="investigateEvidenceJoins">
       	LEFT JOIN INVESTIGATE_EVIDENCE a ON a.complaint_main_id = b.complaint_main_id AND a.investigate_type='1'
        LEFT JOIN INVESTIGATE_EVIDENCE aa ON aa.complaint_main_id = b.complaint_main_id AND aa.investigate_type='2'
        LEFT JOIN AUDIT_ACCEPTANCE au on b.complaint_main_id = au.complaint_main_id
        LEFT JOIN REPORT_REGISTRATION r ON b.complaint_main_id=r.complaint_main_id
        LEFT JOIN ACT_RU_TASK t on t.PROC_INST_ID_=b.PROC_INS_ID
        LEFT JOIN SYS_OFFICE o on o.id=b.involve_hospital
        LEFT JOIN SYS_AREA sa ON sa.id=o.area_id
        LEFT JOIN SYS_OFFICE o1 ON o1.id=b.involve_department
        LEFT JOIN SYS_USER u1 ON u1.id=b.involve_employee
        LEFT JOIN SYS_USER u ON u.id=a.investigator
        LEFT JOIN SYS_USER u2 ON u2.id=a.next_link_man
        LEFT JOIN SYS_DICT d ON d.value = a.address AND d.TYPE='meeting'
        LEFT JOIN SYS_DICT dd ON dd.value = aa.address AND dd.TYPE='meeting'
	</sql>

	<select id="get" resultType="InvestigateEvidence">
		SELECT
		<include refid="investigateEvidenceColumns"/>
		FROM COMPLAINT_MAIN b
		<include refid="investigateEvidenceJoins"/>
		WHERE a.investigate_evidence_id = #{investigateEvidenceId} OR r.report_registration_id = #{investigateEvidenceId}
	</select>

	<select id="findList" resultType="InvestigateEvidence">
		SELECT
		ci.COMPLAINT_ID as "complaintMain.complaintId",
		<include refid="investigateEvidenceColumns"/>
		FROM COMPLAINT_MAIN b
		<include refid="investigateEvidenceJoins"/>
		LEFT JOIN COMPLAINT_INFO ci ON ci.COMPLAINT_MAIN_ID = b.COMPLAINT_MAIN_ID
		<where>
			if(a.del_flag IS NOT NULL,a.del_flag = #{DEL_FLAG_NORMAL},r.del_flag = #{DEL_FLAG_NORMAL})  AND b.PROC_INS_ID is NOT null and t.TASK_DEF_KEY_='forensics'
			<if test="user != null and user.id != null and user.id != ''">
				AND t.ASSIGNEE_ LIKE CONCAT('%', #{user.loginName}, '%')
			</if>
			<if test="list != null and list != ''">
				AND t.ASSIGNEE_ in
				<foreach collection="list" item="id" index="index" open="(" close=")" separator=",">
					#{id}
				</foreach>
			</if>
			<if test="reportRegistration != null and reportRegistration.reportTime != null and reportRegistration.reportTime !=''">
				AND r.report_time LIKE CONCAT('%', #{reportRegistration.reportTime}, '%')
			</if>
			<if test="complaintMain !=null and complaintMain.patientName != null and complaintMain.patientName != ''">
				AND b.patient_name LIKE CONCAT('%', #{complaintMain.patientName}, '%')
			</if>
			<if test="complaintMain !=null and complaintMain.caseNumber != null and complaintMain.caseNumber != ''">
				AND b.case_number LIKE CONCAT('%', #{complaintMain.caseNumber}, '%')
			</if>
			<if test="complaintMain !=null and complaintMain.involveHospital != null and complaintMain.involveHospital != ''">
				AND b.involve_hospital LIKE CONCAT('%', #{complaintMain.involveHospital}, '%')
			</if>
			<if test="startTime != null and startTime != '' and endTime != null and endTime != ''">
				AND a.handle_time BETWEEN #{startTime} AND #{endTime}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<select id="findAllList" resultType="InvestigateEvidence">
		SELECT
		<include refid="investigateEvidenceColumns"/>
		FROM INVESTIGATE_EVIDENCE a
		<include refid="investigateEvidenceJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<insert id="insert">
		INSERT INTO INVESTIGATE_EVIDENCE(
			investigate_evidence_id,
			complaint_main_id,
			start_time,
			end_time,
			address,
			cause,
			investigator,
			note_taker,
			content,
			focus,
			investigate_type,
			handle_people,
			handle_time,
			next_link,
			next_link_man,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag
		) VALUES (
			#{investigateEvidenceId},
			#{complaintMainId},
			#{startTime},
			#{endTime},
			#{address},
			#{cause},
			#{investigator},
			#{noteTaker},
			#{content},
			#{focus},
			#{investigateType},
			#{handlePeople},
			#{handleTime},
			#{nextLink},
			#{nextLinkMan},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{delFlag}
		)
	</insert>

	<update id="update">
		UPDATE INVESTIGATE_EVIDENCE SET
			investigate_evidence_id = #{investigateEvidenceId},
			complaint_main_id = #{complaintMainId},
			start_time = #{startTime},
			end_time = #{endTime},
			address = #{address},
			cause = #{cause},
			investigator = #{investigator},
			note_taker = #{noteTaker},
			content = #{content},
			focus = #{focus},
			investigate_type = #{investigateType},
			handle_people = #{handlePeople},
			handle_time = #{handleTime},
			next_link = #{nextLink},
			next_link_man = #{nextLinkMan},
			update_by = #{updateBy.id},
			update_date = #{updateDate}
		WHERE investigate_evidence_id = #{investigateEvidenceId}
	</update>

	<update id="delete">
		UPDATE INVESTIGATE_EVIDENCE SET
			del_flag = #{DEL_FLAG_DELETE}
		WHERE investigate_evidence_id = #{investigateEvidenceId}
	</update>

</mapper>